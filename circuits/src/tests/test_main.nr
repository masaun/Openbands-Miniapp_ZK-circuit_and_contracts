use crate::{
    main,
    MAX_PARTIAL_DATA_LENGTH, MAX_DOMAIN_LENGTH,
    zk_jwt
};

use zk_jwt::{
    utils::{decimal_string_to_field, get_domain_start_index_in_email},
    nullifier_generator::{
        generate_nullifier_with_poseidon2,
        generate_nullifier_with_pedersen,
    },
};

use super::test_input_data::{
    PARTIAL_DATA,
    PARTIAL_HASH,
    FULL_DATA_LENGTH,
    BASE64_DECODE_OFFSET,
    JWT_PUBKEY_MODULUS_LIMBS,
    JWT_PUBKEY_REDC_PARAMS_LIMBS,
    JWT_SIGNATURE_LIMBS,
    DOMAIN
};

#[test]
pub fn test_main() {
    // @dev - Test values for the main function
    let partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH> = PARTIAL_DATA;
    let partial_hash: [u32; 8] = PARTIAL_HASH;
    let full_data_length: u32 = FULL_DATA_LENGTH;
    let base64_decode_offset: u32 = BASE64_DECODE_OFFSET;
    let jwt_pubkey_modulus_limbs: [u128; 18] = JWT_PUBKEY_MODULUS_LIMBS;
    let jwt_pubkey_redc_params_limbs: [u128; 18] = JWT_PUBKEY_REDC_PARAMS_LIMBS;
    let jwt_signature_limbs: [u128; 18] = JWT_SIGNATURE_LIMBS;
    let domain: BoundedVec<u8, MAX_DOMAIN_LENGTH> = DOMAIN;

    // @dev - Test values for the main function (which is same with the zkGlassdoor's one)
    // @dev - [Result]: Successful to pass the test for the main()
    let partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH> = BoundedVec::from_array([106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48]);
    let partial_hash: [u32; 8] = [2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610, 4160738201];
    let full_data_length: u32 = 268;
    let base64_decode_offset: u32 = 1;
    let jwt_pubkey_modulus_limbs: [u128; 18] = [484791102317025465533947056954494751, 689128460766062759582134715581990032, 810523707777777878428965619663888709, 184404549238669475316963116864788898, 93466218048229154672139102341852900, 584828628768888069086079532464056431, 97425187031931427039620311245463762, 26273806718910063326353308419294998, 788747954066548540615875263034804664, 889704621954975151388848797463892494, 311999144542197118282319553447935979, 569776388981460921496753063185331362, 903966640703701959992132828577771898, 159022820921763067563807580152706463, 503819859541011037194389727017199051, 1078173269124751507098806957834900664, 808018922828293630146825008649069450, 163];
    let jwt_pubkey_redc_params_limbs: [u128; 18] = [1143167338325541577958669340190596824, 782066667103526839077340987159104121, 1067845759344375818181746341911682002, 880124617802511701465844415806808588, 285259139341669707856057706066903101, 1230850420220071595120007854793337041, 243441877489860292941608721967510056, 821283804950244931298352888469271304, 265590023859021620015146340457966193, 955602690275722281613949658760787989, 704159826142581942518373637894303280, 313938418637521056314346970388282852, 296174013877567499290252280618882959, 127533166408087917092441034792304239, 486694435757811118946661778147879193, 742440511645057019411661928820777129, 106100992772450627263374716203348785, 6409];
    let jwt_signature_limbs: [u128; 18] = [782421962573548264472674190647943355, 528649442614902878048130358901749842, 795671681115216636642039527621785323, 342055983261463759066440970886912343, 320943042314824191484469254030368420, 233931545977215775766660875366648712, 166738968145911552289782464945436391, 1280090914380823160665554635957223606, 225322564371992173705155119766257284, 1012067778676730712845356243167441596, 337008035250054394089555850701430953, 441480997772890594691718538441538925, 1266099611422563733802354067242028554, 163890419575820619684088542045789366, 71236811945264458762129145425586273, 106105739687938386497215871288359508, 598323717706499880526430558338637686, 97];
    let domain: BoundedVec<u8, MAX_DOMAIN_LENGTH> = BoundedVec::from_array([116,101,115,116,46,99,111,109]); // "test.com"

    let nullifier = main(
        partial_data,
        partial_hash,
        full_data_length,
        base64_decode_offset,
        jwt_pubkey_modulus_limbs,
        jwt_pubkey_redc_params_limbs,
        jwt_signature_limbs,
        domain
    );
    println(f"nullifier: {nullifier}\n");

    let nullifier_via_poseidon = generate_nullifier_with_poseidon2([full_data_length as Field, base64_decode_offset as Field]);
    println(f"nullifier_via_poseidon: {nullifier_via_poseidon}\n");

    //let nullifier_via_pedersen = generate_nullifier_with_pedersen([full_data_length as Field, base64_decode_offset as Field]);
    //println(f"nullifier_via_pedersen: {nullifier_via_pedersen}\n");

    // Assert the expected nullifier
    assert(nullifier == nullifier_via_poseidon, "Invalid nullifier");
    //assert(nullifier == nullifier_via_pedersen, "Invalid nullifier");
}

#[test]
pub fn test_nullifier_generation() {
    // Test cases for the main function
    let partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH> = BoundedVec::from_array([106, 98, 50, 48, 105, 76, 67, 74, 122, 100, 87, 73, 105, 79, 105, 74, 66, 81, 107, 78, 69, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 120, 102, 100, 109, 86, 121, 97, 87, 90, 112, 90, 87, 81, 105, 79, 110, 82, 121, 100, 87, 85, 115, 73, 109, 53, 118, 98, 109, 78, 108, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 73, 105, 119, 105, 90, 87, 49, 104, 97, 87, 119, 105, 79, 105, 74, 104, 98, 71, 108, 106, 90, 85, 66, 48, 90, 88, 78, 48, 76, 109, 78, 118, 98, 83, 73, 115, 73, 109, 108, 104, 100, 67, 73, 54, 77, 84, 99, 122, 78, 122, 89, 48, 77, 106, 73, 120, 78, 121, 119, 105, 89, 88, 86, 107, 73, 106, 111, 105, 77, 84, 73, 122, 77, 84, 73, 122, 77, 84, 73, 122, 76, 106, 81, 49, 78, 106, 81, 49, 78, 106, 81, 49, 78, 105, 73, 115, 73, 109, 86, 52, 99, 67, 73, 54, 77, 84, 99, 53, 79, 84, 107, 53, 79, 84, 107, 53, 79, 88, 48]);
    let partial_hash: [u32; 8] = [2065651337, 2814693704, 862745553, 2384319000, 1412758034, 3553265356, 3156727610, 4160738201];
    let full_data_length: u32 = 268;
    let base64_decode_offset: u32 = 1;
    let jwt_pubkey_modulus_limbs: [u128; 18] = [484791102317025465533947056954494751, 689128460766062759582134715581990032, 810523707777777878428965619663888709, 184404549238669475316963116864788898, 93466218048229154672139102341852900, 584828628768888069086079532464056431, 97425187031931427039620311245463762, 26273806718910063326353308419294998, 788747954066548540615875263034804664, 889704621954975151388848797463892494, 311999144542197118282319553447935979, 569776388981460921496753063185331362, 903966640703701959992132828577771898, 159022820921763067563807580152706463, 503819859541011037194389727017199051, 1078173269124751507098806957834900664, 808018922828293630146825008649069450, 163];
    let jwt_pubkey_redc_params_limbs: [u128; 18] = [1143167338325541577958669340190596824, 782066667103526839077340987159104121, 1067845759344375818181746341911682002, 880124617802511701465844415806808588, 285259139341669707856057706066903101, 1230850420220071595120007854793337041, 243441877489860292941608721967510056, 821283804950244931298352888469271304, 265590023859021620015146340457966193, 955602690275722281613949658760787989, 704159826142581942518373637894303280, 313938418637521056314346970388282852, 296174013877567499290252280618882959, 127533166408087917092441034792304239, 486694435757811118946661778147879193, 742440511645057019411661928820777129, 106100992772450627263374716203348785, 6409];
    let jwt_signature_limbs: [u128; 18] = [782421962573548264472674190647943355, 528649442614902878048130358901749842, 795671681115216636642039527621785323, 342055983261463759066440970886912343, 320943042314824191484469254030368420, 233931545977215775766660875366648712, 166738968145911552289782464945436391, 1280090914380823160665554635957223606, 225322564371992173705155119766257284, 1012067778676730712845356243167441596, 337008035250054394089555850701430953, 441480997772890594691718538441538925, 1266099611422563733802354067242028554, 163890419575820619684088542045789366, 71236811945264458762129145425586273, 106105739687938386497215871288359508, 598323717706499880526430558338637686, 97];
    let domain: BoundedVec<u8, MAX_DOMAIN_LENGTH> = BoundedVec::from_array([116,101,115,116,46,99,111,109]); // "test.com"

    // // Test cases for the main function
    // let partial_data: BoundedVec<u8, MAX_PARTIAL_DATA_LENGTH> = PARTIAL_DATA;
    // let partial_hash: [u32; 8] = PARTIAL_HASH;
    // let full_data_length: u32 = FULL_DATA_LENGTH;
    // let base64_decode_offset: u32 = BASE64_DECODE_OFFSET;
    // let jwt_pubkey_modulus_limbs: [u128; 18] = JWT_PUBKEY_MODULUS_LIMBS;
    // let jwt_pubkey_redc_params_limbs: [u128; 18] = JWT_PUBKEY_REDC_PARAMS_LIMBS;
    // let jwt_signature_limbs: [u128; 18] = JWT_SIGNATURE_LIMBS;
    // let domain: BoundedVec<u8, MAX_DOMAIN_LENGTH> = DOMAIN;

    let nullifier_via_poseidon = generate_nullifier_with_poseidon2([full_data_length as Field, base64_decode_offset as Field]);
    println(f"nullifier_via_poseidon: {nullifier_via_poseidon}\n");

    let nullifier_via_pedersen = generate_nullifier_with_pedersen([full_data_length as Field, base64_decode_offset as Field]);
    println(f"nullifier_via_pedersen: {nullifier_via_pedersen}\n");
}